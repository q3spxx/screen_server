var data = require("./db.json");
var fData = require("./db_future.json");
var auth = require("./db_auth.json");
var fs = require("fs");

function clear_auth_note () {
	var cur_date = new Date();
	cur_date = cur_date.getTime();

	auth = auth.filter(function (note) {
		var temp = new Date(note.date);
		temp = temp.getTime();
		var result = cur_date - temp;
		if (result > 1000) {
			return false;
		} else {
			return true;
		};
	});

	fs.writeFile(__dirname + "/db_auth.json", JSON.stringify(auth), function (err) {
		if (err) {
			throw err;
		};
	});
};

function add_auth_note (token) {
	var obj = {
		token: token,
		update: true,
		date: new Date()
	}
	auth.push(obj);

	fs.writeFile(__dirname + "/db_auth.json", JSON.stringify(auth), function (err) {
		if (err) {
			throw err;
		};
	});
};

function search_token (token) {
	for (var i = 0; i < auth.length; i++) {
		if (token == auth[i].token) {
			return i;
		};
	};
	return false;
};

function update_off (index){
	auth[index].update = false;
	auth[index].date = new Date();

	fs.writeFile(__dirname + "/db_auth.json", JSON.stringify(auth), function (err) {
		if (err) {
			throw err;
		};
	});
};

function update_on () {
	auth.forEach(function (user) {
		user.update = true;
	});

	fs.writeFile(__dirname + "/db_auth.json", JSON.stringify(auth), function (err) {
		if (err) {
			throw err;
		};
	});
};

function check_update (token) {
	for (var i = 0; i < auth.length; i++) {
		if (token == auth[i].token) {
			return auth[i].update;
		};
	};
	return null;
};

function addMovie (req) {
	if (req.tTable == "current") {
		data.id = Number(data.id) + 1;
		data.movies.push({
			id: data.id,
			name: req.name,
			sessions: req.sessions
		});
		fs.writeFile(__dirname + "/db.json", JSON.stringify(data), function (err) {
			if (err) throw err;
		});
	} else if (req.tTable == "future") {
		fData.id = Number(fData.id) + 1;
		fData.movies.push({
			id: fData.id,
			name: req.name,
			sessions: req.sessions
		});
		fs.writeFile(__dirname + "/db_future.json", JSON.stringify(data), function (err) {
			if (err) throw err;
		});
	};
};
function delMovie (id, tTable) {
	if (tTable == "current") {	
		for (var i = 0; i < data.movies.length; i++) {
			if (data.movies[i].id == Number(id)) {
				data.movies.splice(i, 1);
				fs.writeFile(__dirname + "/db.json", JSON.stringify(data), function (err) {
					if (err) throw err;
				});
				return true;
			};
		};
	} else if (tTable == "future") {
		for (var i = 0; i < fData.movies.length; i++) {
			if (fData.movies[i].id == Number(id)) {
				fData.movies.splice(i, 1);
				fs.writeFile(__dirname + "/db_future.json", JSON.stringify(fData), function (err) {
					if (err) throw err;
				});
				return true;
			};
		};
	};
};
function setMovie (req) {
	if (req.tTable == "current") {
		for (var i = 0; i < data.movies.length; i++) {
			if (data.movies[i].id == Number(req.id)) {
				data.movies[i].name = req.name;
				data.movies[i].sessions = req.sessions;
				fs.writeFile(__dirname + "/db.json", JSON.stringify(data), function (err) {
					if (err) throw err;
				});
			};
		};
	} else if (req.tTable == "future") {
		for (var i = 0; i < fData.movies.length; i++) {
			if (fData.movies[i].id == Number(req.id)) {
				fData.movies[i].name = req.name;
				fData.movies[i].sessions = req.sessions;
				fs.writeFile(__dirname + "/db_future.json", JSON.stringify(fData), function (err) {
					if (err) throw err;
				});
			};
		};
	};
};
function copyCF () {
	fData.movies = [];
	var cloneData = clone(data);
	cloneData.movies.forEach(function (movie) {
		var fMovie = movie;
		fMovie.id = fData.id;
		fData.id = fData.id + 1;
		fData.movies.push(fMovie);
	});
	fs.writeFile(__dirname + "/db_future.json", JSON.stringify(fData), function (err) {
		if (err) throw err;
	});
};
function copyFC () {
	data.movies = [];
	var cloneData = clone(fData);
	cloneData.movies.forEach(function (fMovie) {
		var movie = fMovie;
		movie.id = data.id;
		data.id = data.id + 1;
		data.movies.push(movie);
	});
	fs.writeFile(__dirname + "/db.json", JSON.stringify(data), function (err) {
		if (err) throw err;
	});

};

function save (new_data, type) {
	var base;
	var file;
	if (type == "current") {
		base = data;
		file = "/db.json";
	} else {
		base = fData;
		file = "/db_future.json";
	};
	base.movies = new_data;
	fs.writeFile(__dirname + file, JSON.stringify(base), function (err) {
		if (err) {
			throw err;
		};
	});
};
function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
};
exports.data = data;
exports.fData = fData;
exports.addMovie = addMovie;
exports.delMovie = delMovie;
exports.setMovie = setMovie;
exports.copyCF = copyCF;
exports.copyFC = copyFC;
exports.add_auth_note = add_auth_note;
exports.search_token = search_token;
exports.update_off = update_off;
exports.check_update = check_update;
exports.update_on = update_on;
exports.clear_auth_note = clear_auth_note;
exports.save = save;